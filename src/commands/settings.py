import json
from vkbottle.rule import FromMe
from vkbottle.user import Blueprint, Message
from prefixs import p, error_sticker, sticker, stickerforstart,error_stickerforstart
from unit import edit_msg, get_user
from src.Filters import adder, checker, Days
bp = Blueprint("Settings")

@bp.on.message_handler(FromMe(),text="–Ω–ª", lower=True)
async def SettingsInformation(ans:Message):
    y = "‚úÖ"
    n = "‚ùå"
    import time as t
    TimeInfo = [*t.localtime()]
    if TimeInfo[1] == 1:
        TimeInfo[1] = ["–Ø–Ω–≤–∞—Ä—å", 1]
    elif TimeInfo[1] == 2:
        TimeInfo[1] = ["–§–µ–≤—Ä–∞–ª—å", 2]
    elif TimeInfo[1] == 3:
        TimeInfo[1] = ["–ú–∞—Ä—Ç", 3]
    elif TimeInfo[1] == 4:
        TimeInfo[1] = ["–ê–ø—Ä–µ–ª—å", 4]
    elif TimeInfo[1] == 5:
        TimeInfo[1] = ["–ú–∞–π", 5]
    elif TimeInfo[1] == 6:
        TimeInfo[1] = ["–ò—é–Ω—å", 6]
    elif TimeInfo[1] == 7:
        TimeInfo[1] = ["–ò—é–ª—å", 7]
    elif TimeInfo[1] == 8:
        TimeInfo[1] = ["–ê–≤–≥—É—Å—Ç", 8]
    elif TimeInfo[1] == 9:
        TimeInfo[1] = ["–°–µ–Ω—Ç—è–±—Ä—å", 9]
    elif TimeInfo[1] == 10:
        TimeInfo[1] = ["–û–∫—Ç—è–±—Ä—å", 10]
    elif TimeInfo[1] == 11:
        TimeInfo[1] = ["–ù–æ—è–±—Ä—å", 11]
    elif TimeInfo[1] == 12:
        TimeInfo[1] = ["–î–µ–∫–∞–±—Ä—å", 12]


    with open("Settings.json", encoding="utf-8") as Info:
        ResponseSettings = json.load(Info)

    UserRespone = await get_user(ans.from_id)

    if ResponseSettings["AutoFerma"] == True:
        AutoFerma = y + " –í–∫–ª—é—á–µ–Ω–∞"
    else:
        AutoFerma = n + " –í—ã–∫–ª—é—á–µ–Ω–∞"

    StartTime = ResponseSettings["StartTime"]
    if StartTime == '':
        StartTime = f"{error_sticker}–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    DevUp = ResponseSettings["DevUp"]
    if DevUp == False:
        DevUp = n
    else:
        DevUp = y

    VKME = ResponseSettings["VK_ME_TOKEN"]
    if VKME == False:
        VKME = n
    else:
        VKME = y

    import os, time
    path = "src//shubs//"
    path2 = "src//meroleplays//"
    path3 = "src//dovs//"
    RPCmd = int(len(os.listdir(path2)))
    SHB = int(len(os.listdir(path)))
    dovs = int(len(os.listdir(path3)))
    povtoryalka_prefix = checker("Settings", "povtoryalka_prefix")
    text = f"""
{sticker}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{ans.from_id}({UserRespone["user_name"]} {UserRespone["user_family"]})
–í–∞—à —Å—Ç–∏–∫–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ: {error_stickerforstart}
–í–∞—à —Å—Ç–∏–∫–µ—Ä: {stickerforstart}
–í–∞—à –ø—Ä–µ—Ñ–∏–∫—Å: {p}
–í–∞—à –ø—Ä–µ—Ñ–∏–∫—Å –ø–æ–≤—Ç–æ—Ä—è–ª–∫–∏: {povtoryalka_prefix}

–ê–≤—Ç–æ—Ñ–µ—Ä–º–∞: {AutoFerma}
–ó–∞–ø—É—Å–∫ LLP —Å–æ—Å—Ç–æ—è–ª—Å—è: {StartTime}

–ü—Ä–∏—Å—É—Ç—Å–≤–∏–µ Dev-Up –∫–ª—é—á–∞: {DevUp}
–ü—Ä–∏—Å—É—Ç—Å–≤–∏–µ —Ç–æ–∫–µ–Ω–∞ KateMobile: {y}
–ü—Ä–∏—Å—É—Ç—Å–≤–∏–µ —Ç–æ–∫–µ–Ω–∞ VK ME: {VKME}

–ú–µ—Å—è—Ü: {TimeInfo[1][0]}: {TimeInfo[1][1]} –ø–æ —Å—á—ë—Ç—É.
–í—Ä–µ–º—è: {TimeInfo[3]}:{TimeInfo[4]}.{TimeInfo[5]} üïë
–ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞: {TimeInfo[2]}.{TimeInfo[1][1]}.{TimeInfo[0]} üìÖ

–î–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {dovs}
–ö–æ–ª-–≤–æ –†–ü-–ö–æ–º–∞–Ω–¥: {RPCmd+1}
–ö–æ–ª-–≤–æ —à–∞–±–ª–æ–Ω–æ–≤: {SHB+1}

–í–∞—à –ø–∏–Ω–≥: {round(time.time() - ans.date, 2)}
–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–≥–∞—è –∏–∑-–∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JSON —Ñ–æ—Ä–º–∞—Ç–∞.
"""
    await ans(text, reply_to=ans.id)

