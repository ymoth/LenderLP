from vkbottle.rule import FromMe
from vkbottle.user import Message, Blueprint
from unit import edit_msg, get_id_for_domain
from prefixs import error_sticker, p, sticker
import json
import prefixs as PREFIX
from unit import __author__, __version__, __namelp__

bp = Blueprint("Signals")


@bp.on.message_handler(FromMe(),
                       text=[p + "–Ω—Ä–ø", p + "–Ω–æ–≤–æ–µ —Ä–ø"], lower=True
                       )
async def myrptext(ans: Message):
    text = f"""–ß—Ç–æ-–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –†–ü-–ö–æ–º–∞–Ω–¥—É, –ø–∏—à–∏—Ç–µ —Ç–∞–∫:
{p}+–Ω—Ä–ø (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–ø)
–°–º–∞–π–ª–∏–∫ –¥–µ–π—Å—Ç–≤–∏–µ

–ü—Ä–∏–º–µ—Ä:
{p}+–Ω—Ä–ø —É–¥–∞—Ä–∏—Ç—å
üëä —É–¥–∞—Ä–∏–ª(–∞)"""
    await edit_msg(ans, text)


@bp.on.message_handler(FromMe(),
                       text=[p + "+–Ω—Ä–ø <namerp>\n<sticker> <value>", p + "–Ω–æ–≤–æ–µ —Ä–ø <namerp>\n<sticker> <value>"],
                       lower=True
                       )
async def rpadd(ans: Message, namerp: str, sticker: str, value: str):
    namejson = f"src/meroleplays/{namerp}.json"

    text = {"namerp": namerp,
            "sticker": sticker,
            "value": value}

    with open(namejson, "w", encoding="utf-8") as i:
        json.dump(dict(text), i, ensure_ascii=False)

    complete = f'{PREFIX.sticker} –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ RP-–ö–æ–º–∞–Ω–¥–∞ "{namerp}"'
    await edit_msg(ans, complete)


@bp.on.message_handler(FromMe(), text=p + "—Ä–ø <namerp>", lower=True)
async def RolePlay(ans: Message, namerp: str):
    try:
        namejson = f"src/meroleplays/{namerp}.json"
        with open(namejson, encoding="utf-8") as RP:
            text = json.load(RP)
        sticker, value = text["sticker"], text["value"]
        respone = await bp.api.users.get(user_ids=ans.from_id)
        respone2 = await bp.api.users.get(user_ids=ans.reply_message.from_id)
        from_user, user, from_user_id, user_id = respone[0].first_name, respone2[0].first_name, respone[0].id, respone2[
            0].id
        textlower = f"{sticker} | @id{from_user_id} ({from_user}) {value} @id{user_id}({user})"
        await edit_msg(ans, textlower)
    except FileNotFoundError:
        await edit_msg(ans, f"{error_sticker}–£ –í–∞—Å –Ω–µ—Ç—É –†–ü-–ö–æ–º–∞–Ω–¥—ã {namerp}")


@bp.on.message_handler(FromMe(), text=[p + "-–Ω—Ä–ø <namerp>", p + "-—Ä–ø <namerp>"], lower=True)
async def shabdelete(ans: Message, namerp: str):
    try:
        import os
        namejson = f"src/meroleplays/{namerp}.json"
        os.remove(namejson)
        await edit_msg(ans, f'{sticker}–†–ü-–ö–æ–º–∞–Ω–¥–∞ "{namerp}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω–∞.')
    except:
        await edit_msg(ans, f"{error_sticker}–£ –í–∞—Å –Ω–µ—Ç—É –†–ü-–ö–æ–º–∞–Ω–¥—ã {namerp}")


@bp.on.message_handler(FromMe(), text=[p + "–∏–Ω—Ñ–æ–ª–ø", p + "–ª–ø –∏–Ω—Ñ–æ"], lower=True)
async def shabdelete(ans: Message):
    import time
    y = "‚úÖ"
    n = "‚ùå"
    from prefixs import stickerforstart, error_stickerforstart
    a = await bp.api.users.get(user_ids=ans.from_id)
    username = a[0].first_name
    lastname = a[0].last_name

    import os
    path = "src//shubs//"
    path2 = "src//meroleplays//"
    RPCmd = int(len(os.listdir(path)))
    SHB = int(len(os.listdir(path2)))

    import time as tm

    t = tm

    TimeInfo = [*t.localtime()]
    if TimeInfo[1] == 1:
        TimeInfo[1] = ["–Ø–Ω–≤–∞—Ä—å", 1]
    elif TimeInfo[1] == 2:
        TimeInfo[1] = ["–§–µ–≤—Ä–∞–ª—å", 2]
    elif TimeInfo[1] == 3:
        TimeInfo[1] = ["–ú–∞—Ä—Ç", 3]
    elif TimeInfo[1] == 4:
        TimeInfo[1] = ["–ê–ø—Ä–µ–ª—å", 4]
    elif TimeInfo[1] == 5:
        TimeInfo[1] = ["–ú–∞–π", 5]
    elif TimeInfo[1] == 6:
        TimeInfo[1] = ["–ò—é–Ω—å", 6]
    elif TimeInfo[1] == 7:
        TimeInfo[1] = ["–ò—é–ª—å", 7]
    elif TimeInfo[1] == 8:
        TimeInfo[1] = ["–ê–≤–≥—É—Å—Ç", 8]
    elif TimeInfo[1] == 9:
        TimeInfo[1] = ["–°–µ–Ω—Ç—è–±—Ä—å", 9]
    elif TimeInfo[1] == 10:
        TimeInfo[1] = ["–û–∫—Ç—è–±—Ä—å", 10]
    elif TimeInfo[1] == 11:
        TimeInfo[1] = ["–ù–æ—è–±—Ä—å", 11]
    elif TimeInfo[1] == 12:
        TimeInfo[1] = ["–î–µ–∫–∞–±—Ä—å", 12]

    text = f"""
üìò {__namelp__} LP
üìï –í–µ—Ä—Å–∏—è LP: {__version__}
üìô –ê–≤—Ç–æ—Ä: {__author__}

–í–∞—à —Å—Ç–∏–∫–µ—Ä: {stickerforstart}
–í–∞—à —Å—Ç–∏–∫–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ: {error_stickerforstart}
–í–∞—à –ø—Ä–µ—Ñ–∏–∫—Å: {p}

–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –Ω–ª
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @id{ans.from_id}({username} {lastname})
"""
    return await edit_msg(ans, text)


@bp.on.message_handler(FromMe(), text=[p + "–∫–æ–Ω–≤", p + "–ø–µ—Ä–µ–≤–æ–¥"], lower=True)
async def perevod(ans: Message):
    rus = "—ë!\"‚Ññ;%:?–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é.–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–™–§–´–í–ê–ü–†–û–õ–î–ñ–≠/–Ø–ß–°–ú–ò–¢–¨–ë–Æ,"
    eng = "~!@#$%^&qwertyuiop[]asdfghjkl;'zxcvbnm,./QWERTYUIOP{}ASDFGHJKL:\"|ZXCVBNM<>?"
    message_id = ans.reply_message.id
    dadadadada = await bp.api.messages.get_by_id(message_ids=message_id)
    message = dadadadada.items[0].text
    msg = message.translate(message.maketrans(eng, rus))
    await edit_msg(ans, msg)


from loguru import logger


@logger.catch()
@bp.on.chat_message(FromMe(), text=[p + "—á–∞—Ç –∏–Ω—Ñ–æ", p + "–∏–Ω—Ñ–æ –æ —á–∞—Ç–µ"])
async def chatinfo(ans: Message):
    CHATRESPONE = await bp.api.request('messages.getChat', {'chat_id': ans.chat_id})
    namechat = CHATRESPONE['title']
    adminchat = CHATRESPONE['admin_id']
    RESPONE = await bp.api.users.get(user_ids=adminchat)
    name, fam = RESPONE[0].first_name, RESPONE[0].last_name
    memberscul = CHATRESPONE['members_count']
    chat_id = CHATRESPONE['id']
    photo = CHATRESPONE["photo_200"]
    if not photo:
        photo = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"
    import time
    message = f"""
{sticker}–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:
–ù–∞–∑–≤–∞–Ω–∏–µ –±–µ—Å–µ–¥—ã: {namechat}
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–µ—Å–µ–¥—ã: @id{adminchat}({name} {fam}) 
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {memberscul}
–ú–æ–π –∞–π–¥–∏ —á–∞—Ç–∞: {chat_id}
–ê–≤–∞—Ç–∞—Ä–∫–∞ —á–∞—Ç–∞: {photo}"""

    await edit_msg(ans, message)


import asyncio


@logger.catch()
@bp.on.message_handler(FromMe(), text=[p + "—Å–ø–∞–º <cul>\n<txt>", p + "+—Å–ø–∞–º <cul>\n<txt>"], lower=True)
async def spam(ans: Message, cul: str, txt: str):
    net = int(cul)
    print(type(net))
    for i in range(net):
        await asyncio.sleep(0.5)
        await ans(txt)


@bp.on.message_handler(FromMe(), text=p + "—Å–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –Ω–∞ <newprefix>", lower=True)
async def np(ans: Message, newprefix: str):
    with open("config.json", "r", encoding="utf-8") as d:
        data = json.load(d)
    data['prefix'] = newprefix
    with open("config.json", "w", encoding="utf-8") as d:
        d.write(json.dumps(data, indent=1, ensure_ascii=False))

    await edit_msg(ans, f'{sticker}–í–∞—à –ø—Ä–µ—Ñ–∏–∫—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "{newprefix}"\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ LLP!"')


@bp.on.message_handler(FromMe(), text=p + "—Å–º–µ–Ω–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –Ω–∞ <newsticker>", lower=True)
async def ns(ans: Message, newsticker: str):
    with open("config.json", "r", encoding="utf-8") as d:
        data = json.load(d)
    data['stickerLP'] = newsticker
    with open("config.json", "w", encoding="utf-8") as d:
        d.write(json.dumps(data, indent=2, ensure_ascii=False))
    await edit_msg(ans, f'{sticker}–í–∞—à —Å—Ç–∏–∫–µ—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "{newsticker}"\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ LLP!"')


@bp.on.message_handler(FromMe(), text=[p + "—Å–º–µ–Ω–∏—Ç—å –µ—Ä—Ä–æ—Ä—Å—Ç–∏–∫–µ—Ä –Ω–∞ <newerrorsticker>",
                                       p + "—Å–º–µ–Ω–∏—Ç—å –µ—Ä—Ä–æ—Ä —Å—Ç–∏–∫–µ—Ä –Ω–∞ <newerrorsticker>"], lower=True)
async def ne(ans: Message, newerrorsticker: str):
    with open("config.json", "r", encoding="utf-8") as d:
        data = json.load(d)
    data['errorSticker'] = newerrorsticker
    with open("config.json", "w", encoding="utf-8") as d:
        d.write(json.dumps(data, indent=3, ensure_ascii=False))

    await edit_msg(ans, f'{sticker}–í–∞—à —Å—Ç–∏–∫–µ—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "{newerrorsticker}"\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ LLP!')


@bp.on.message_handler(FromMe(), text=p + "–∫—Å–º—Å", lower=True)
async def da(ans: Message):
    await edit_msg(ans, f"{sticker} –î–∞–Ω–Ω—ã–π —á–∞—Ç —Ä–∞—Å—Ç—è–Ω—É–ª—Å—è —É–∂–µ –Ω–∞ {ans.conversation_message_id} —Å–æ–æ–±—â–µ–Ω–∏–π")


from vkbottle import VKError


@bp.on.chat_message(FromMe(), text=[p + "–ø–∏–Ω", "+–∑–∞–∫—Ä–µ–ø"], lower=True)
async def pin_add(ans: Message):
    try:
        await bp.api.messages.pin(message_id=ans.reply_message.id, peer_id=ans.peer_id)
        from prefixs import sticker, error_sticker
        await ans(f"{sticker}–£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ —Å–æ–æ–±–µ—â–µ–Ω–∏–µ.", reply_to=ans.id)
    except VKError:
        from prefixs import sticker, error_sticker
        await ans(f"{error_sticker} –ù–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", reply_to=ans.id)


@bp.on.chat_message(FromMe(), text=[p + "–∞–Ω–ø–∏–Ω", "-–∑–∞–∫—Ä–µ–ø"], lower=True)
async def pin_del(ans: Message):
    try:
        from prefixs import sticker
        await bp.api.messages.unpin(peer_id=ans.peer_id)
        await ans(f"{sticker}–£—Å–ø–µ—à–Ω–æ —É–±—Ä–∞–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_to=ans.id)
    except VKError:
        from prefixs import sticker, error_sticker
        await ans(f"{error_sticker}–û—à–∏–±–∫–∞..", reply_to=ans.id)


@bp.on.chat_message(FromMe(), text=[p + "–≤–µ—Ä–Ω—É—Ç—å", p + "–¥–æ–±–∞–≤–∏—Ç—å"], lower=True)
async def userAdd(ans: Message):
    try:
        await bp.api.messages.add_chat_user(user_id=ans.reply_message.from_id, chat_id=ans.chat_id)
        await ans(f"{sticker}–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–µ—Å–µ–¥—É.", reply_to=ans.id)
    except VKError:
        await ans(f"{error_sticker}–ù–µ —É–¥–∞—ë—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.")


@bp.on.chat_message(FromMe(), text=[p + "–¥–æ–±–∞–≤–∏—Ç—å <domain_>", "–≤–µ—Ä–Ω—É—Ç—å <domain_>"])
async def userAddchat(ans: Message, domain_: str):
    try:
        from unit import get_id_for_domain
        domain = domain_.replace("@", "")
        id = get_id_for_domain(domain_=domain)
        await bp.api.messages.add_chat_user(chat_id=ans.chat_id, user_id=id)
        await ans(f"{sticker}@id{id}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ—Å–µ–¥—É.")
    except VKError:
        await ans(f"{error_sticker}–û—à–∏–±–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.")


@bp.on.chat_message(FromMe(), text=[p + "–∫–∏–∫ <domain_>", "–∏—Å–∫–ª—é—á–∏—Ç—å <domain_>"], lower=True)
async def userAddchat(ans: Message, domain_: str):
    try:
        domain = domain_.replace("@", "")
        await bp.api.messages.remove_chat_user(user_id=get_id_for_domain(domain_=domain_), chat_id=ans.chat_id)
        await ans(f"{sticker}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –±–µ—Å–µ–¥—ã")
    except VKError:
        await ans(f"{error_sticker}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –±–µ—Å–µ–¥—ã. –û—à–∏–±–∫–∞ VK API.")


@bp.on.message_handler(FromMe(), text=[p + "–ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–∫ –º–∏ <token__>", p + "–ø–æ–¥–∫–ª—é—á–∏—Ç—å vk me <token__>"], lower=True)
async def VK_ME_ADD(token__: str, ans: Message):
    from src.Filters import MiniBase
    with open("config.json", 'r', encoding="utf-8") as tok:
        data = json.load(tok)
        token = data['VK_ME token']

        data["VK_ME token"] = token__
    with open("config.json", "w", encoding="utf-8") as VKME:
        VKME.write(json.dumps(data, indent=3))


@bp.on.message_handler(FromMe(), text=p + "+–∞–¥–º–∏–Ω <domain>")
async def AddChatAdmin(ans: Message, domain):
    try:
        from unit import get_id_for_domain
        domain = domain.replace("@", "")
        id = get_id_for_domain(domain_=domain)
        await bp.api.request("messages.setMemberRole", {"peer_id":ans.peer_id,
                                                        "member_id":id,
                                                        "role":"admin"})
        await edit_msg(ans, f"{sticker} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.")
    except VKError:
        await edit_msg(ans, f"{error_sticker}–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


@bp.on.message_handler(FromMe(), text=p + "-–∞–¥–º–∏–Ω <domain>")
async def DellChatAdmin(ans: Message, domain):
    try:
        from unit import get_id_for_domain
        domain = domain.replace("@", "")
        id = get_id_for_domain(domain_=domain)
        await bp.api.request("messages.setMemberRole", {"peer_id":ans.peer_id,
                                                        "member_id":id,
                                                        "role":"member"})
        await edit_msg(ans, f"{sticker} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–±—Ä–∞–Ω —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞.")
    except VKError:
        await edit_msg(ans, f"{error_sticker}–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —Å–Ω—è—Ç–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")





